[gd_scene load_steps=7 format=1]

[ext_resource path="res://Cameras/stereo_camera.gd" type="Script" id=1]
[ext_resource path="res://Cameras/white_dot.png" type="Texture" id=2]

[sub_resource type="CanvasItemShader" id=1]

_code = {
"fragment": "// Distortion shader for our left eye

uniform float screen_width_cm = 10.5;
uniform float ipd = 6.5;
uniform float k1 = 0.22;
uniform float k2 = 0.24;
uniform float upscale = 1.0;
float aspect_ratio = 667.0 / 750.0;

vec2 coords = (UV * vec2(2.0)) - vec2(1.0);
vec2 eye_center = vec2(((-ipd / 2.0) + (screen_width_cm / 4.0)) / (screen_width_cm / 2.0), 0.0);
vec2 offset = coords - eye_center;

// take aspect ratio into account
offset.y /= aspect_ratio;

// distort
vec2 offset_sq = offset * offset;
float radius_sq = offset_sq.x + offset_sq.y;
float radius_s4 = radius_sq * radius_sq;
float distortion_scale = 1.0 + (k1 * radius_sq) + (k2 * radius_s4);
offset *= distortion_scale;

// reapply aspect ratio
offset.y *= aspect_ratio;

// add our eye center back in
coords = offset + eye_center;
coords /= upscale;
if (coords.x < -1.0 || coords.y < -1.0 || coords.x > 1.0 || coords.y > 1.0) {
	COLOR = vec4(0.0, 0.0, 0.0, 1.0);
} else {
	coords = (coords + vec2(1.0)) / vec2(2.0);
	COLOR = tex(TEXTURE, coords);
};
",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[sub_resource type="CanvasItemMaterial" id=2]

shader/shader = SubResource( 1 )
shader/shading_mode = 0
shader_param/screen_width_cm = 10.5
shader_param/ipd = 6.5
shader_param/k1 = 0.22
shader_param/k2 = 0.24
shader_param/upscale = 1.0

[sub_resource type="CanvasItemShader" id=3]

_code = {
"fragment": "// Distortion shader for our right eye

uniform float screen_width_cm = 10.5;
uniform float ipd = 6.5;
uniform float k1 = 0.22;
uniform float k2 = 0.24;
uniform float upscale = 1.0;
float aspect_ratio = 667.0 / 750.0;

vec2 coords = UV * vec2(2.0) - vec2(1.0);
vec2 eye_center = vec2(((ipd / 2.0) - (screen_width_cm / 4.0)) / (screen_width_cm / 2.0), 0.0);
vec2 offset = coords - eye_center;

// take aspect ratio into account
offset.y /= aspect_ratio;

// distort
vec2 offset_sq = offset * offset;
float radius_sq = offset_sq.x + offset_sq.y;
float radius_s4 = radius_sq * radius_sq;
float distortion_scale = 1.0 + (k1 * radius_sq) + (k2 * radius_s4);
offset *= distortion_scale;

// reapply aspect ratio
offset.y *= aspect_ratio;

// add our eye center back in
coords = offset + eye_center;
coords /= upscale;
if (coords.x < -1.0 || coords.y < -1.0 || coords.x > 1.0 || coords.y > 1.0) {
	COLOR = vec4(0.0, 0.0, 0.0, 1.0);
} else {
	coords = (coords + vec2(1.0)) / vec2(2.0);
	COLOR = tex(TEXTURE, coords);
};
",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

[sub_resource type="CanvasItemMaterial" id=4]

shader/shader = SubResource( 3 )
shader/shading_mode = 0
shader_param/screen_width_cm = 10.5
shader_param/ipd = 6.5
shader_param/k1 = 0.22
shader_param/k2 = 0.24
shader_param/upscale = 1.0

[node name="stereo_camera" type="Spatial"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
script/script = ExtResource( 1 )
eyes_distance = 6.5
lcd_width = 10.5
lcd_dist = 8.0
k1 = 0.01
k2 = 0.01
near = 0.1
far = 400.0
upscale = 1.0
worldscale = 100.0

[node name="left_camera_pos" type="Spatial" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform/local = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0325, 0, 0 )

[node name="right_camera_pos" type="Spatial" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform/local = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0325, 0, 0 )

[node name="Viewport_left" type="Viewport" parent="."]

rect = Rect2( 0, 0, 1916, 2310 )
own_world = false
world = null
transparent_bg = false
render_target/enabled = true
render_target/v_flip = false
render_target/clear_on_new_frame = false
render_target/filter = false
render_target/gen_mipmaps = false
render_target/update_mode = 3
audio_listener/enable_2d = false
audio_listener/enable_3d = false
physics/object_picking = false
gui/disable_input = false

[node name="Camera_left" type="Camera" parent="Viewport_left"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform/local = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0325, 0, 0 )
projection = 2
left = -0.25
right = 0.40625
top = 0.328125
bottom = -0.328125
near = 0.01
far = 0.08
keep_aspect = 0
current = true
visible_layers = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0

[node name="Viewport_right" type="Viewport" parent="."]

rect = Rect2( 0, 0, 1916, 2310 )
own_world = false
world = null
transparent_bg = false
render_target/enabled = true
render_target/v_flip = false
render_target/clear_on_new_frame = false
render_target/filter = true
render_target/gen_mipmaps = false
render_target/update_mode = 3
audio_listener/enable_2d = false
audio_listener/enable_3d = false
physics/object_picking = false
gui/disable_input = false

[node name="Camera_right" type="Camera" parent="Viewport_right"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform/local = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0325, 0, 0 )
projection = 2
left = -0.40625
right = 0.25
top = 0.328125
bottom = -0.328125
near = 0.01
far = 0.08
keep_aspect = 0
current = true
visible_layers = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0

[node name="ViewportSprite_left" type="ViewportSprite" parent="."]

material/material = SubResource( 2 )
viewport = NodePath("../Viewport_left")
centered = false

[node name="ViewportSprite_right" type="ViewportSprite" parent="."]

material/material = SubResource( 4 )
transform/pos = Vector2( 1916, 0 )
viewport = NodePath("../Viewport_right")
centered = false

[node name="ScreenDivider" type="Sprite" parent="."]

transform/pos = Vector2( 1916, 0 )
transform/scale = Vector2( 1, 2200 )
texture = ExtResource( 2 )
centered = false


